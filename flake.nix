{
  description = "datsnvim flake";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    neovim-nightly-overlay.url = "github:nix-community/neovim-nightly-overlay";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    indentmini-nvim = {
      url = "github:nvimdev/indentmini.nvim";
      flake = false;
    };
    gruvbox-nvim = {
      url = "github:datsfilipe/gruvbox.nvim";
      flake = false;
    };
    min-theme-nvim = {
      url = "github:datsfilipe/min-theme.nvim";
      flake = false;
    };
    vesper-nvim = {
      url = "github:datsfilipe/vesper.nvim";
      flake = false;
    };
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    neovim-nightly-overlay,
    ...
  } @ inputs: let
    defaultConfig = {
      theme = "catppuccin-frappe";
    };
  in
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = import nixpkgs {
        inherit system;
        overlays = [neovim-nightly-overlay.overlays.default];
      };

      indentmini-plugin = pkgs.vimUtils.buildVimPlugin {
        pname = "indentmini.nvim";
        version = "latest";
        src = inputs.indentmini-nvim;
      };
      gruvbox-plugin = pkgs.vimUtils.buildVimPlugin {
        pname = "gruvbox.nvim";
        version = "latest";
        src = inputs.gruvbox-nvim;
        doCheck = false;
      };
      min-theme-plugin = pkgs.vimUtils.buildVimPlugin {
        pname = "min-theme.nvim";
        version = "latest";
        src = inputs.min-theme-nvim;
        doCheck = false;
      };
      vesper-plugin = pkgs.vimUtils.buildVimPlugin {
        pname = "vesper.nvim";
        version = "latest";
        src = inputs.vesper-nvim;
        doCheck = false;
      };

      mkNeovimBundle = {theme ? defaultConfig.theme}: let
        configSource = pkgs.vimUtils.buildVimPlugin {
          pname = "datsnvim-config";
          version = "custom";
          src = ./nvim;
          doCheck = false;
        };

        themeConfigFile = pkgs.writeTextFile {
          name = "datsnvim-theme.lua";
          text = ''
            -- This file is generated by your flake.nix
            vim.g.datsnvim_theme = "${theme}"
          '';
        };
      in
        pkgs.wrapNeovimUnstable pkgs.neovim-unwrapped {
          viAlias = true;
          vimAlias = true;
          extraWrapperArgs = [
            "--suffix"
            "LIBRARY_PATH"
            ":"
            "${pkgs.lib.makeLibraryPath [pkgs.stdenv.cc.cc pkgs.zlib]}"
            "--suffix"
            "PKG_CONFIG_PATH"
            ":"
            "${pkgs.lib.makeSearchPathOutput "dev" "lib/pkgconfig" [pkgs.stdenv.cc.cc pkgs.zlib]}"
          ];

          luaRcContent = ''
            dofile("${themeConfigFile}")
            dofile("${configSource}/init.lua")
          '';

          plugins =
            [configSource]
            ++ (with pkgs; [
              vimPlugins.conform-nvim
              vimPlugins.indent-blankline-nvim
              vimPlugins.nvim-lspconfig
              vimPlugins.mini-diff
              vimPlugins.oil-nvim
              vimPlugins.vim-wakatime
              vimPlugins.nvim-treesitter
              vimPlugins.nvim-lint
              vimPlugins.supermaven-nvim
              vimPlugins.fidget-nvim
              vimPlugins.catppuccin-nvim
              vimPlugins.kanagawa-nvim
              indentmini-plugin
              gruvbox-plugin
              min-theme-plugin
              vesper-plugin
            ]);
        };

      hmModule = {
        config,
        lib,
        pkgs,
        ...
      }:
        with lib; let
          cfg = config.programs.datsnvim;
        in {
          options.programs.datsnvim = {
            enable = mkEnableOption "datsnvim";
            package = mkOption {
              type = types.package;
              default = self.packages.${pkgs.system}.default;
              defaultText = literalExpression "datsnvim.packages.${pkgs.system}.default";
            };
            settings = mkOption {
              type = types.submodule {
                options = {
                  theme = mkOption {
                    type = types.str;
                    default = defaultConfig.theme;
                  };
                };
              };
              default = {};
            };
          };
          config = mkIf cfg.enable {
            home.packages = [
              (cfg.package.override cfg.settings)
            ];
          };
        };
    in {
      packages.default = pkgs.lib.makeOverridable mkNeovimBundle defaultConfig;
      homeManagerModules.default = hmModule;
      overlays.default = final: prev: {
        datsnvim = self.packages.${prev.system}.default;
      };
    });
}
